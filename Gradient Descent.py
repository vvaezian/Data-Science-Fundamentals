# Gradient Descent on simplest linear model y(x, w) = w0 + w1*x1 + ... + wn*xn
# we start with an initial guess for w
# and update it by taking steps in opposite of the gradient of error function
# The error function we use here is sum of squared errors

from matplotlib import pyplot as plt
from IPython.display import clear_output
import random
import time

with open('...') as f:
  d = f.readlines()[1:]  # [1:] to exclude header
data = [ eval(line.rstrip('\n')) for line in d ]
X, Y = zip(*data)
# data = [(1, 715.91), (2, 715.91), (3, 715.91), (4, 715.91), (5, 715.91), (6, 715.91), (7, 715.91), (8, 715.91), (9, 715.91), (10, 715.91), (11, 715.91), (12, 715.91), (13, 715.91), (14, 715.91), (15, 715.91), (16, 715.91), (17, 715.91), (18, 715.91), (19, 715.91), (20, 715.91), (21, 715.91), (22, 715.91), (23, 715.91), (24, 715.91), (25, 715.91), (26, 715.91), (27, 715.91), (28, 715.91), (29, 715.91), (30, 715.91), (31, 715.91), (32, 715.91), (33, 715.91), (34, 715.91), (35, 715.91), (36, 715.91), (37, 715.91), (38, 715.91), (39, 715.91), (40, 715.91), (41, 715.91), (42, 715.91), (43, 715.91), (45, 388.89), (46, 388.89), (47, 388.89), (48, 388.89), (49, 388.89), (50, 388.89), (51, 388.89), (52, 388.89), (53, 388.89), (54, 388.89), (55, 388.89), (56, 388.89), (57, 388.89), (58, 388.89), (59, 388.89), (60, 388.89), (61, 388.89), (62, 388.89), (63, 388.89), (64, 388.89), (65, 388.89), (66, 388.89), (67, 388.89), (68, 388.89), (69, 388.89), (70, 388.89), (71, 388.89), (72, 388.89), (73, 388.89), (74, 388.89), (75, 388.89), (76, 388.89), (77, 388.89), (78, 388.89), (79, 388.89), (80, 388.89), (81, 388.89), (82, 388.89), (83, 388.89), (84, 388.89), (85, 388.89), (86, 388.89), (87, 388.89), (88, 388.89), (89, 388.89), (90, 388.89), (91, 388.89), (92, 388.89), (93, 388.89), (94, 388.89), (95, 388.89), (96, 388.89), (97, 388.89), (98, 388.89), (99, 388.89), (100, 388.89), (101, 388.89), (102, 388.89), (103, 388.89), (104, 388.89), (105, 388.89), (106, 388.89), (107, 388.89), (108, 388.89), (109, 388.89), (110, 388.89), (111, 388.89), (112, 388.89), (113, 388.89), (114, 388.89), (115, 388.89), (116, 388.89), (117, 388.89), (118, 388.89), (119, 388.89), (120, 388.89), (121, 388.89), (122, 388.89), (123, 388.89), (124, 388.89), (125, 388.89), (126, 281.25), (127, 281.25), (128, 281.25), (129, 281.25), (130, 281.25), (131, 281.25), (132, 281.25), (133, 281.25), (134, 281.25), (135, 281.25), (136, 281.25), (137, 281.25), (138, 281.25), (139, 281.25), (140, 281.25), (141, 281.25), (142, 281.25), (143, 281.25), (144, 281.25), (145, 281.25), (146, 281.25), (147, 281.25), (148, 281.25), (149, 281.25), (150, 281.25), (151, 281.25), (152, 281.25), (153, 281.25), (154, 281.25), (155, 281.25), (156, 281.25), (157, 281.25), (158, 281.25), (159, 281.25), (160, 281.25), (161, 281.25), (162, 281.25), (163, 281.25), (164, 281.25), (165, 281.25), (166, 281.25), (167, 281.25), (168, 281.25), (169, 281.25), (170, 281.25), (171, 281.25), (172, 281.25), (173, 281.25), (174, 281.25), (175, 281.25), (176, 281.25), (177, 281.25), (178, 281.25), (179, 281.25), (180, 281.25), (181, 281.25), (182, 281.25), (183, 281.25), (184, 281.25), (185, 281.25), (187, 281.25), (188, 281.25), (189, 281.25), (190, 281.25), (191, 281.25), (192, 281.25), (193, 281.25), (194, 281.25), (195, 281.25), (196, 281.25), (197, 281.25), (198, 281.25), (199, 281.25), (200, 281.25), (201, 281.25), (202, 281.25), (203, 281.25), (204, 281.25), (205, 281.25), (206, 281.25), (207, 281.25), (208, 281.25), (209, 281.25), (210, 281.25), (211, 281.25), (212, 281.25), (213, 281.25), (214, 281.25), (215, 281.25), (216, 281.25), (217, 281.25), (218, 281.25), (219, 281.25), (220, 281.25), (221, 281.25), (222, 281.25), (223, 281.25), (224, 281.25), (225, 281.25), (226, 281.25), (227, 281.25), (228, 281.25), (229, 281.25), (230, 281.25), (231, 281.25), (232, 281.25), (233, 281.25), (234, 281.25), (235, 281.25), (236, 281.25), (237, 281.25), (238, 212.84), (239, 212.84), (240, 212.84), (241, 212.84), (242, 212.84), (243, 212.84), (244, 212.84), (245, 212.84), (246, 212.84), (247, 212.84), (248, 212.84), (249, 212.84), (250, 212.84), (251, 212.84), (252, 212.84), (253, 212.84), (254, 212.84), (255, 212.84), (256, 212.84), (258, 212.84), (259, 212.84), (260, 212.84), (261, 212.84), (262, 212.84), (263, 212.84), (264, 212.84), (265, 212.84), (266, 212.84), (267, 212.84), (268, 212.84), (269, 212.84), (270, 212.84), (271, 212.84), (272, 212.84), (273, 212.84), (274, 212.84), (275, 212.84), (276, 212.84), (277, 212.84), (278, 212.84), (279, 212.84), (280, 212.84), (281, 212.84), (282, 212.84), (283, 212.84), (284, 212.84), (285, 212.84), (286, 212.84), (287, 212.84), (288, 212.84), (289, 212.84), (290, 212.84), (291, 212.84), (292, 212.84), (293, 212.84), (295, 212.84), (297, 212.84), (298, 212.84), (299, 212.84), (300, 212.84), (302, 212.84), (303, 212.84), (304, 212.84), (305, 212.84), (306, 212.84), (307, 212.84), (308, 212.84), (309, 212.84), (310, 212.84), (311, 212.84), (312, 212.84), (313, 212.84), (314, 212.84), (315, 212.84), (316, 212.84), (317, 212.84), (318, 212.84), (319, 212.84), (320, 212.84), (321, 212.84), (322, 212.84), (323, 212.84), (324, 212.84), (325, 212.84), (326, 212.84), (327, 212.84), (328, 212.84), (329, 212.84), (330, 212.84), (331, 212.84), (332, 212.84), (334, 212.84), (335, 212.84), (336, 212.84), (337, 212.84), (338, 212.84), (339, 212.84), (340, 212.84), (341, 212.84), (342, 212.84), (343, 212.84), (344, 212.84), (345, 212.84), (346, 212.84), (347, 212.84), (348, 212.84), (349, 212.84), (350, 212.84), (351, 212.84), (352, 212.84), (353, 212.84), (354, 212.84), (355, 212.84), (356, 212.84), (358, 212.84), (359, 212.84), (360, 212.84), (362, 212.84), (363, 212.84), (364, 212.84), (366, 212.84), (367, 212.84), (368, 212.84), (369, 212.84), (370, 212.84), (371, 212.84), (372, 212.84), (373, 212.84), (374, 212.84), (375, 212.84), (376, 212.84), (377, 212.84), (378, 212.84), (379, 212.84), (380, 212.84), (381, 212.84), (382, 212.84), (383, 212.84), (384, 212.84), (385, 212.84), (386, 167.55), (387, 167.55), (388, 167.55), (389, 167.55), (390, 167.55), (391, 167.55), (392, 167.55), (393, 167.55), (394, 167.55), (396, 167.55), (397, 167.55), (398, 167.55), (399, 167.55), (400, 167.55), (401, 167.55), (402, 167.55), (403, 167.55), (404, 167.55), (405, 167.55), (406, 167.55), (408, 167.55), (409, 167.55), (410, 167.55), (411, 167.55), (413, 167.55), (414, 167.55), (415, 167.55), (416, 167.55), (417, 167.55), (418, 167.55), (419, 167.55), (420, 167.55), (421, 167.55), (422, 167.55), (423, 167.55), (424, 167.55), (425, 167.55), (427, 167.55), (428, 167.55), (429, 167.55), (430, 167.55), (431, 167.55), (432, 167.55), (433, 167.55), (434, 167.55), (435, 167.55), (436, 167.55), (437, 167.55), (438, 167.55), (439, 167.55), (440, 167.55), (441, 167.55), (442, 167.55), (443, 167.55), (445, 167.55), (446, 167.55), (447, 167.55), (448, 167.55), (449, 167.55), (450, 167.55), (451, 167.55), (452, 167.55), (453, 167.55), (454, 167.55), (455, 167.55), (456, 167.55), (457, 167.55), (458, 167.55), (460, 167.55), (461, 167.55), (462, 167.55), (463, 167.55), (464, 167.55), (465, 167.55), (466, 167.55), (468, 167.55), (469, 167.55), (470, 167.55), (471, 167.55), (472, 167.55), (474, 167.55), (475, 167.55), (476, 167.55), (477, 167.55), (478, 167.55), (482, 167.55), (483, 167.55), (484, 167.55), (485, 167.55), (486, 167.55), (487, 167.55), (488, 167.55), (489, 167.55), (490, 167.55), (491, 167.55), (492, 167.55), (493, 167.55), (495, 167.55), (496, 167.55), (497, 167.55), (498, 167.55), (499, 167.55), (503, 167.55), (504, 167.55), (505, 167.55), (506, 167.55), (507, 167.55), (508, 167.55), (509, 167.55), (510, 167.55), (511, 167.55), (512, 167.55), (513, 167.55), (514, 167.55), (515, 167.55), (516, 167.55), (517, 167.55), (518, 167.55), (519, 167.55), (521, 167.55), (522, 167.55), (523, 167.55), (524, 167.55), (525, 167.55), (526, 167.55), (527, 167.55), (528, 167.55), (529, 167.55), (530, 167.55), (531, 167.55), (532, 167.55), (534, 167.55), (535, 167.55), (536, 167.55), (537, 167.55), (538, 167.55), (540, 167.55), (541, 167.55), (542, 167.55), (543, 167.55), (544, 167.55), (545, 167.55), (546, 167.55), (547, 167.55), (548, 167.55), (549, 167.55), (550, 167.55), (551, 167.55), (552, 167.55), (554, 167.55), (555, 167.55), (557, 167.55), (558, 167.55), (559, 167.55), (560, 167.55), (561, 167.55), (563, 167.55), (564, 167.55), (565, 167.55), (566, 167.55), (567, 167.55), (568, 167.55), (570, 167.55), (573, 167.55), (574, 129.1), (575, 129.1), (576, 129.1), (577, 129.1), (578, 129.1), (579, 129.1), (580, 129.1), (581, 129.1), (582, 129.1), (583, 129.1), (584, 129.1), (586, 129.1), (587, 129.1), (588, 129.1), (589, 129.1), (590, 129.1), (591, 129.1), (592, 129.1), (593, 129.1), (594, 129.1), (595, 129.1), (596, 129.1), (597, 129.1), (598, 129.1), (599, 129.1), (600, 129.1), (601, 129.1), (602, 129.1), (603, 129.1), (604, 129.1), (606, 129.1), (607, 129.1), (609, 129.1), (610, 129.1), (611, 129.1), (612, 129.1), (613, 129.1), (614, 129.1), (615, 129.1), (616, 129.1), (617, 129.1), (618, 129.1), (619, 129.1), (620, 129.1), (621, 129.1), (622, 129.1), (623, 129.1), (625, 129.1), (626, 129.1), (627, 129.1), (628, 129.1), (630, 129.1), (631, 129.1), (633, 129.1), (634, 129.1), (635, 129.1), (636, 129.1), (637, 129.1), (638, 129.1), (639, 129.1), (640, 129.1), (641, 129.1), (642, 129.1), (643, 129.1), (644, 129.1), (645, 129.1), (646, 129.1), (648, 129.1), (649, 129.1), (651, 129.1), (652, 129.1), (653, 129.1), (654, 129.1), (655, 129.1), (656, 129.1), (657, 129.1), (658, 129.1), (659, 129.1), (660, 129.1), (661, 129.1), (662, 129.1), (663, 129.1), (665, 129.1), (666, 129.1), (668, 129.1), (670, 129.1), (671, 129.1), (672, 129.1), (674, 129.1), (675, 129.1), (676, 129.1), (678, 129.1), (679, 129.1), (680, 129.1), (682, 129.1), (683, 129.1), (684, 129.1), (686, 129.1), (687, 129.1), (688, 129.1), (689, 129.1), (690, 129.1), (691, 129.1), (692, 129.1), (693, 129.1), (695, 129.1), (696, 129.1), (697, 129.1), (699, 129.1), (700, 129.1), (702, 129.1), (703, 129.1), (704, 129.1), (705, 129.1), (706, 129.1), (707, 129.1), (708, 129.1), (709, 129.1), (710, 129.1), (711, 129.1), (712, 129.1), (713, 129.1), (714, 129.1), (716, 129.1), (717, 129.1), (719, 129.1), (720, 129.1), (721, 129.1), (722, 129.1), (723, 129.1), (724, 129.1), (725, 129.1), (727, 129.1), (728, 129.1), (729, 129.1), (731, 129.1), (732, 129.1), (733, 129.1), (734, 129.1), (736, 129.1), (738, 129.1), (739, 129.1), (740, 129.1), (741, 129.1), (743, 129.1), (744, 129.1), (745, 129.1), (746, 129.1), (747, 129.1), (748, 129.1), (749, 129.1), (750, 129.1), (751, 129.1), (752, 129.1), (753, 129.1), (754, 129.1), (755, 129.1), (756, 129.1), (757, 129.1), (760, 129.1), (761, 129.1), (762, 129.1), (764, 129.1), (765, 129.1), (766, 129.1), (767, 129.1), (768, 129.1), (769, 129.1), (770, 129.1), (771, 129.1), (772, 129.1), (774, 129.1), (775, 129.1), (777, 129.1), (778, 129.1), (779, 129.1), (780, 129.1), (781, 129.1), (783, 129.1), (785, 129.1), (787, 129.1), (788, 129.1), (789, 129.1), (790, 129.1), (791, 129.1), (792, 129.1), (793, 129.1), (794, 129.1), (795, 129.1), (797, 129.1), (798, 129.1), (799, 129.1), (800, 129.1), (801, 129.1), (802, 129.1), (803, 129.1), (804, 129.1), (805, 129.1), (806, 129.1), (807, 129.1), (809, 129.1), (810, 129.1), (811, 129.1), (812, 129.1), (813, 129.1), (814, 129.1), (816, 129.1), (819, 102.72), (820, 102.72), (822, 102.72), (823, 102.72), (825, 102.72), (826, 102.72), (828, 102.72), (829, 102.72), (830, 102.72), (831, 102.72), (832, 102.72), (833, 102.72), (834, 102.72), (835, 102.72), (837, 102.72), (838, 102.72), (839, 102.72), (841, 102.72), (844, 102.72), (845, 102.72), (847, 102.72), (848, 102.72), (849, 102.72), (850, 102.72), (851, 102.72), (852, 102.72), (853, 102.72), (854, 102.72), (855, 102.72), (858, 102.72), (859, 102.72), (860, 102.72), (862, 102.72), (863, 102.72), (865, 102.72), (866, 102.72), (867, 102.72), (868, 102.72), (869, 102.72), (870, 102.72), (871, 102.72), (872, 102.72), (873, 102.72), (875, 102.72), (876, 102.72), (878, 102.72), (881, 102.72), (882, 102.72), (883, 102.72), (886, 102.72), (889, 102.72), (890, 102.72), (891, 102.72), (892, 102.72), (893, 102.72), (895, 102.72), (896, 102.72), (897, 102.72), (898, 102.72), (900, 102.72), (901, 102.72), (902, 102.72), (903, 102.72), (904, 102.72), (905, 102.72), (906, 102.72), (907, 102.72), (908, 102.72), (909, 102.72), (911, 102.72), (912, 102.72), (913, 102.72), (914, 102.72), (915, 102.72), (917, 102.72), (918, 102.72), (919, 102.72), (920, 102.72), (921, 102.72), (922, 102.72), (923, 102.72), (924, 102.72), (925, 102.72), (926, 102.72), (927, 102.72), (928, 102.72), (929, 102.72), (931, 102.72), (932, 102.72), (933, 102.72), (934, 102.72), (937, 102.72), (938, 102.72), (939, 102.72), (941, 102.72), (942, 102.72), (943, 102.72), (946, 102.72), (947, 102.72), (948, 102.72), (950, 102.72), (951, 102.72), (952, 102.72), (953, 102.72), (954, 102.72), (956, 102.72), (958, 102.72), (959, 102.72), (963, 102.72), (964, 102.72), (965, 102.72), (966, 102.72), (967, 102.72), (968, 102.72), (969, 102.72), (970, 102.72), (971, 102.72), (972, 102.72), (974, 102.72), (975, 102.72), (978, 102.72), (982, 102.72), (983, 102.72), (984, 102.72), (985, 102.72), (986, 102.72), (988, 102.72), (990, 102.72), (991, 102.72), (992, 102.72), (993, 102.72), (994, 102.72), (995, 102.72), (997, 102.72), (998, 102.72), (1000, 102.72)]

plt.scatter(X, Y)
plt.show()

min_X = min(i[0] for i in data)
max_X = max(i[0] for i in data)

def step(p, direction, step_size):
  """move step_size in the direction from p"""
  return [p_i + step_size * direction_i
          for p_i, direction_i in zip(p, direction)]

def minimize_batch(target_fn, gradient_fn, w_0, tolerance=30):
  """
  use gradient descent to find theta that minimizes target function.
  tolerance: to stop the program if the pace of the improvement is less than this number
  """

  w = w_0  # initial guess for weights
  step_size = -0.000001  # to minimize, move towards opposite of gradient
  value = target_fn(w)
  errs = []

  while True:
    gradient = gradient_fn(w)
    next_w = step(w, gradient, step_size)
    next_value = target_fn(next_w)
    if abs(next_value - value) < tolerance:
      errs.append(value)
      return (w, errs)
    else:
      w, value = next_w, next_value
      # plot the fitted curve with the current weights
      x_s, y_s = min_X, w[0] + w[1] * min_X  # start point for the line
      x_e, y_e = max_X, w[0] + w[1] * max_X  # end point for the line
      clear_output(wait=True)  # to update the current plot
      plt.scatter(X, Y)
      plt.plot([x_s, x_e], [y_s, y_e], color='green')
      plt.show()
      errs.append(value)
      #break

def error(w):
  # y(x, w) = w0 + w1*x
  # error = 1/2 Sigma (y(x_n,w) - t_n) ** 2
  # the 1/2 coefficient is for making the math simple and not important
  return sum(((w[0] + w[1] * item[0]) - item[1]) ** 2
             for item in data)

def error_grad(w):
  # error = 1/2 Sigma (y(x_n,w) - t_n) ** 2
  # grad_error = [Sigma(y(x_n,w) - t_n), Sigma x_n(y(x_n,w) - t_n)]
  return [sum((w[0] + w[1] * item[0] - item[1]) for item in data) / len(data),
          sum((w[0] + w[1] * item[0] - item[1]) * item[0] for item in data) / len(data)]

final_w = minimize_batch(error, error_grad,
                       [random.uniform(0, 1000),
                        random.uniform(-10, 10)])
print(final_w[1])
